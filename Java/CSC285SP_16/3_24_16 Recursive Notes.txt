CSC285 Recursive Notes
a) Stopping Conditions
//Example
Recursive(int n){
	if(n==value)return value
	else{
		//perform some equations
		Recursive(n-1)
	}
}

Recursive Functions Need
1)	Stopping Condition
2)	Call themselves, mutating(?) toward the stopping condition.

Factorials are a good example.
5!=	5*4*3*2*1
	5(4)!
	5(4)(3)!
	5(4)(3)(2)!
	5(4)(3)(2)(1)!
	
public static long factorial(int n){
			if(n=0){	return 1;
			}else{
				return n*factorial(n-1);
			}
			return;
}

Fibonacci Numbers
Index	0	1	2	3	4	5	6	7	8	9	10
Fib(i)	0	1	1	2	3	5	8	13	21	34	55

Fib(i)=	{Fib(i-1)+fib(i-2)
		{Fib{0}=0
		{Fib(1)=1
		
public static long fib(long index){}
	if(index==0)return 0;
	else if(index==1)return 1;
	else return fib(index-1)+fib(index-2);
	return;
{

						 ___________fib(6)__________
						/							\
					fib(5)						 __fib(4)___
					/	\						/			\
				fib(4)	fib(3)				fib(3)			fib(2)
										/			\		/	\

...etc. This tree is big and automated ways to render trees like this don't exist for me in notepad++

Selection Sort
Given a list of integer numbers to sort smaller to larger:
1)Pass through the list finding the index of the largest number.
2)Exchange the largest number with the n'th number on the list
3)Get n to n-1nd stop 1. stop when n=0

recursiveSortMgr<T>{
	protected ArrayList<t> = new ArrayList<T>;
	protected int minCount;
	protected T max;
public 

public void selectSort(int high){
	if(high>0){
		int indexOfMax=0;
		max=values.get(0);
		for(i=1;i<=high;i++){
			if((values.get(i).compareTo(max)){
				max=values.get(i);
				indexOfMax=i;
				values.set(indexOfMax, values.get(high));
				values.set(high,max);
				selectSort(high-1);
			}//end of if
		}
		else return;
	return;
	}	
}

Array Search	A(n)
1) Assume that an array of n elements has been sorted smaller to larger.
2) Given the value x at what, if any, is x in the array.
3) Divide the array A into two sets of size (0 to n/2) "leftHigh" and (n/2+1 to n-1) "rightHigh"
	A smaller to larger.
4) Set X=A(rightLow) done!
5) If x>A(leftHigh) and x<A(rightHigh)
	then the array of search is A(rightLow) to A(rightHigh)
leftLow=rightLow;
leftHigh=rightHigh/2;
rightLow=rightHigh/2+1;
rightHigh=rightHigh-1;

Read Chapter 18 in Java book.
Page 712 in text has some problems.

Exam 2 info:
Same as last in some ways. Both a Written Test and a Take Home test.